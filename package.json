{
	"name": "linuxkerneldev",
	"displayName": "Embedded Linux Kernel Dev",
	"description": "Tool to help work with for Embedded Linux Kernel development environments. (Kernel Linux, Device Tree, Kconfig, Buildroot)",
	"publisher": "microhobby",
	"repository": {
		"url": "https://github.com/microhobby/linuxkerneldev"
	},
	"version": "0.6.1",
	"keywords": [
		"ctags",
		"kernel",
		"linux",
		"kconfig",
		"device tree",
		"buildroot"
	],
	"engines": {
		"vscode": "^1.80.0"
	},
	"categories": [
		"Other"
	],
	"activationEvents": [
		"onLanguage:c",
		"onLanguage:makefile",
		"onDebugResolve:crash"
	],
	"main": "./out/extension.js",
	"contributes": {
		"commands": [
			{
				"command": "embeddedLinuxDev.regenerateCTags",
				"title": "Ctags Support: regenerate tags file"
			},
			{
				"command": "embeddedLinuxDev.reloadCTags",
				"title": "Ctags Support: reloadCtags"
			},
			{
				"command": "embeddedLinuxDev.findAndOpenDeviceTreeDoc",
				"title": "Device Tree Doc from compatible",
				"icon": {
					"light": "res/boolean.svg",
					"dark": "res/boolean.svg"
				}
			},
			{
				"command": "embeddedLinuxDev.findAndOpenDeviceTreeMatchDriver",
				"title": "Device Driver Match from compatible",
				"icon": {
					"light": "res/boolean.svg",
					"dark": "res/boolean.svg"
				}
			},
			{
				"command": "embeddedLinuxDev.openArmDtsDtsi",
				"title": "ARM dts/dtsi from include",
				"icon": {
					"light": "res/boolean.svg",
					"dark": "res/boolean.svg"
				}
			},
			{
				"command": "embeddedLinuxDev.openArm64DtsDtsi",
				"title": "ARM64 dts/dtsi from include",
				"icon": {
					"light": "res/boolean.svg",
					"dark": "res/boolean.svg"
				}
			},
			{
				"command": "embeddedLinuxDev.openLinuxInclude",
				"title": "Include/linux from selected",
				"icon": {
					"light": "res/boolean.svg",
					"dark": "res/boolean.svg"
				}
			},
			{
				"command": "embeddedLinuxDev.breakKernel",
				"title": "Break the kernel to initialize the debug"
			}
		],
		"configuration": [
			{
				"title": "Universal CTags",
				"properties": {
					"ctags.excludePatterns": {
						"type": "array",
						"items": "string",
						"markdownDescription": "An array of file and directory exclude patterns to be considered when (re)generating tags. Each pattern is passed to ctags as --exclude=_pattern_."
					},
					"ctags.languages": {
						"type": "array",
						"items": "string",
						"markdownDescription": "An array of languages to be considered when (re)generating tags. The languages are passed to ctags as --languages=_lang1_,_lang2_. See ctags --list-languages for valid values.",
						"default": [
							"C",
							"C++",
							"DTS",
							"Kconfig",
							"Make"
						]
					},
					"ctags.regenerateOnSave": {
						"type": "boolean",
						"markdownDescription": "If true, then ctags will be regenerated and reindexed on save.",
						"default": false
					},
					"ctags.disable": {
						"type": "boolean",
						"markdownDescription": "If true, then ctags will be disabled",
						"default": false
					}
				}
			},
			{
				"title": "Linux Kernel Dev",
				"properties": {
					"kerneldev.useDocker": {
						"type": "boolean",
						"markdownDescription": "If true, then ctags/dtc/cpp will generated from the seadoglinux/utils docker image (Windows Only!)",
						"default": false
					},
					"kerneldev.experimental.newDtsEngine": {
						"type": "boolean",
						"markdownDescription": "Use the experimental Device Tree Source completion and lookup engine. (⚠️ Experimental features have not been fully tested and may have unexpected behavior)",
						"default": false
					},
					"kerneldev.experimental.newKconfigEngine": {
						"type": "boolean",
						"markdownDescription": "Use the experimental Kconfig completion and lookup engine. (⚠️ Experimental features have not been fully tested and may have unexpected behavior)",
						"default": false
					},
					"kerneldev.breakBySysrq": {
						"type": "boolean",
						"markdownDescription": "Use serial sysrq instead ssh to break the Kernel to debug mode",
						"default": true
					},
					"kerneldev.ssh_ip": {
						"type": "string",
						"markdownDescription": "Remote Embedded Linux IP address to debug"
					},
					"kerneldev.ssh_psswd": {
						"type": "string",
						"markdownDescription": "Remote Embedded Linux password to debug"
					},
					"kerneldev.ssh_login": {
						"type": "string",
						"markdownDescription": "Remote Embedded Linux login to debug"
					},
					"kerneldev.kgdb_port": {
						"type": "string",
						"markdownDescription": "The port number to be used by the telnet KGDB proxy"
					},
					"kerneldev.serial_port": {
						"type": "string",
						"markdownDescription": "The port number to be used by the telnet serial proxy"
					},
					"kerneldev.serial_baudRate": {
						"type": "string",
						"markdownDescription": "The serial baud rate to config the agent proxy connectino"
					},
					"kerneldev.serial_dev": {
						"type": "string",
						"markdownDescription": "The serial /dev/<name> to connect by the agent proxy"
					},
					"kerneldev.debugLogs": {
						"type": "boolean",
						"markdownDescription": "Enable detailed debug logging for development and troubleshooting. When enabled, will log document changes and other detailed information.",
						"default": false
					},
					"kerneldev.kernelPath": {
						"type": "string",
						"markdownDescription": "Path to the Linux kernel source directory. If not specified, will use the workspace root path. This path is used for finding device tree bindings, drivers, and documentation.",
						"default": ""
					}
				}
			},
			{
				"title": "DeviceTree",
				"properties": {
					"devicetree.bindings": {
						"type": "array",
						"description": "List of directories containing binding descriptors. Relative paths are executed from each workspace.",
						"default": [
							"${workspaceFolder}/dts/bindings",
							"${workspaceFolder}/Documentation/devicetree/bindings"
						]
					},
					"devicetree.includePaths": {
						"type": "array",
						"description": "List of directories containing DTS include files. Relative paths are executed from each workspace.",
						"default": [
							"${workspaceFolder}/include",
							"${workspaceFolder}/scripts/dtc/include-prefixes"
						]
					}
				}
			},
			{
				"title": "Kconfig",
				"properties": {
					"kconfig.root": {
						"type": "string",
						"description": "Root kconfig file to start indexing."
					},
					"kconfig.env": {
						"type": "object",
						"description": "Mapping of environment variables to use in string insertion. Instances of $(VAR) will be replaced by their environment variable VAR's value.",
						"patternProperties": {
							".*": {
								"type": "string"
							}
						}
					},
					"kconfig.conf": {
						"type": "object",
						"description": "Static configuration items entries as an object.",
						"patternProperties": {
							"^CONFIG_\\w[\\w_\\d]*": {
								"type": [
									"string",
									"integer",
									"boolean"
								]
							}
						},
						"additionalProperties": false
					},
					"kconfig.conf_files": {
						"type": "array",
						"description": "Array of properties files to always parse before the open properties file.",
						"items": {
							"type": "string"
						}
					},
					"kconfig.cfiles": {
						"type": "boolean",
						"description": "Enable Kconfig hover information and go to definition in C files",
						"default": true
					},
					"kconfig.disable": {
						"type": "boolean",
						"description": "Disable Kconfig language features",
						"default": false
					}
				}
			}
		],
		"viewsContainers": {
			"activitybar": [
				{
					"id": "linuxdev-options",
					"title": "Embedded Linux Dev",
					"icon": "res/embeddedLinux.svg"
				}
			]
		},
		"menus": {
			"view/item/context": [
				{
					"command": "embeddedLinuxDev.findAndOpenDeviceTreeDoc",
					"when": "view == linuxDevCmdView",
					"group": "navigation"
				},
				{
					"command": "embeddedLinuxDev.findAndOpenDeviceTreeMatchDriver",
					"when": "view == linuxDevCmdView",
					"group": "navigation"
				}
			],
			"editor/context": [
				{
					"command": "embeddedLinuxDev.findAndOpenDeviceTreeDoc",
					"when": "resourceLangId == c || resourceLangId == dts || resourceLangId == dtsi",
					"group": "LinuxGroup1@1"
				},
				{
					"command": "embeddedLinuxDev.findAndOpenDeviceTreeMatchDriver",
					"when": "resourceLangId == c || resourceLangId == dts || resourceLangId == dtsi",
					"group": "LinuxGroup1@2"
				},
				{
					"command": "embeddedLinuxDev.openArmDtsDtsi",
					"when": "resourceLangId == c || resourceLangId == dts || resourceLangId == dtsi",
					"group": "LinuxGroup2@1"
				},
				{
					"command": "embeddedLinuxDev.openArm64DtsDtsi",
					"when": "resourceLangId == c || resourceLangId == dts || resourceLangId == dtsi",
					"group": "LinuxGroup2@2"
				},
				{
					"command": "embeddedLinuxDev.openLinuxInclude",
					"when": "resourceLangId == c || resourceLangId == dts || resourceLangId == dtsi",
					"group": "LinuxGroup3@1"
				}
			]
		},
		"views": {
			"linuxdev-options": [
				{
					"id": "linuxDevCmdView",
					"name": "Commands"
				}
			]
		},
		"languages": [
			{
				"id": "kconfig",
				"aliases": [
					"Kconfig"
				],
				"filenamePatterns": [
					"Kconfig*",
					"Kconfig",
					"Config.in",
					"Config.in.*",
					"Config.*.in"
				],
				"configuration": "syntaxes/kconfig-language.json"
			},
			{
				"id": "defconfig",
				"aliases": [
					"defconfig"
				],
				"filenamePatterns": [
					"*_defconfig",
					"defconfig",
					"*.cfg",
					".config",
					"*.config"
				],
				"configuration": "syntaxes/kconfig-language.json"
			},
			{
				"id": "dts",
				"aliases": [
					"DeviceTree"
				],
				"configuration": "syntaxes/devicetree-language.json",
				"extensions": [
					".dts",
					".dtsi",
					".dts_compiled",
					".overlay",
					".dts.pre.tmp"
				],
				"firstLine": "/dts-v1/;"
			}
		],
		"grammars": [
			{
				"language": "kconfig",
				"scopeName": "source.kconfig",
				"path": "./syntaxes/kconfig.tmGrammar.json"
			},
			{
				"language": "defconfig",
				"scopeName": "source.kconfig",
				"path": "./syntaxes/kconfig.tmGrammar.json"
			},
			{
				"language": "dts",
				"scopeName": "source.dts",
				"path": "./syntaxes/dts.tmLanguage.json"
			}
		],
		"breakpoints": [
            {
                "language": "C"
            }
        ],
        "debuggers": [
            {
                "type": "crash",
                "languages": [
                    "C"
                ],
                "label": "Crash Utility",
                "runtime": "node",
                "configurationAttributes": {
                    "launch": {
                        "required": [
                            "crash",
                            "vmlinux",
                            "vmcore"
                        ],
                        "properties": {
                            "crash": {
                                "type": "string",
                                "description": "Absolute path to the crash utility binary",
                                "default": ""
                            },
                            "vmlinux": {
                                "type": "string",
                                "description": "Absolute path to the Kernel vmlinux with debug symbols",
                                "default": ""
                            },
                            "vmcore": {
                                "type": "string",
                                "description": "Absolute path to the kdump vmcore",
                                "default": ""
                            }
                        }
                    }
                },
                "initialConfigurations": [
                    {
                        "type": "crash",
                        "request": "launch",
                        "name": "Run Crash Utility",
                        "crash": "",
                        "vmlinux": "",
                        "vmcore": ""
                    }
                ],
                "configurationSnippets": [
                    {
                        "label": "Crash Utility: Launch",
                        "description": "A new configuration for 'debugging' a crash kdump vmcore",
                        "body": {
                            "type": "crash",
                            "request": "launch",
                            "name": "Run Crash Utility",
                            "crash": "<your crash utility binary path>",
                            "vmlinux": "<your vmlinux path>",
                            "vmcore": "<your crash vmcore path>"
                        }
                    },
					{
						"label": "KGDB aarch64",
						"description": "Kernel GDB configurations for aarch64",
						"body": {
							"type": "kgdb",
							"request": "launch",
							"name": "Kernel KGDB",
							"program": "<vmlinux path>",
							"cwd": "^\"\\${workspaceFolder\\}\"",
							"remote": {
								"enabled": true,
								"address": "^\"localhost:\\${config:kerneldev.kgdb_port\\}\"",
								"mode": "remote",
								"execfile": "<vmlinux path>"
							},
							"internalConsoleOptions": "neverOpen",
							"debuggerPath": "/usr/bin/gdb-multiarch",
							"commandsBeforeExec": [
								"-enable-pretty-printing",
								"set print pretty on",
								"set arch aarch64",
								"set substitute-path <from binary> <your local>",
								"add-symbol-file <path to your local .ko file> <text section> -s .bss <bss section> -s .data <data section>"
							],
							"preLaunchTask": "${command:embeddedLinuxDev.breakKernel}"
						}
					}
                ]
            }
        ]
	},
	"scripts": {
		"vscode:prepublish": "npm run compile",
		"compile": "tsc -p ./",
		"watch": "tsc -watch -p ./",
		"pretest": "npm run compile",
		"test": "node ./out/test/runTest.js",
		"pack": "vsce package",
		"pre": "vsce package --pre-release"
	},
	"devDependencies": {
		"@types/glob": "^7.1.1",
		"@types/js-yaml": "3.11.1",
		"@types/mocha": "^5.2.7",
		"@types/node": "^12.11.7",
		"@types/vscode": "^1.72.0",
		"mocha": "^10.1.0",
		"tslint": "^5.20.0",
		"typescript": "^4.9.3",
		"vscode-test": "^1.2.2"
	},
	"dependencies": {
		"glob": "^7.1.5",
		"js-yaml": "^3.13.1",
		"textindexer": "0.0.7",
		"await-notify": "^1.0.1",
		"fuzzysort": "^2.0.4",
		"@vscode/debugadapter": "^1.56.0"
	},
	"icon": "res/iconRealistic.png",
	"license": "MIT"
}
